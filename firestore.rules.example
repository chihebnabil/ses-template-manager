// Firestore Security Rules for SES Template Manager
// These rules provide basic security for the users collection
// Customize based on your authentication requirements

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - adjust based on your auth requirements
    match /users/{userId} {
      // Allow read access for authenticated admin users
      // You should implement proper admin authentication
      allow read: if request.auth != null && request.auth.token.admin == true;
      
      // For development/testing, you might use:
      // allow read: if request.auth != null;
      
      // Alternatively, for service account access (from your Next.js backend):
      // allow read: if request.auth.uid == "your-service-account-uid";
      
      // Prevent write access from client-side for bulk email use case
      allow write: if false;
    }
    
    // Example: If you want to allow users to read their own data
    // match /users/{userId} {
    //   allow read, write: if request.auth != null && request.auth.uid == userId;
    // }
    
    // Deny all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/*
Additional Notes:

1. For production use, consider implementing Firebase Admin SDK on the server-side
   instead of client-side access to the users collection.

2. If using service account authentication, you can create API routes in your 
   Next.js app that use Firebase Admin SDK to fetch users securely.

3. Example service account rules:
   allow read: if request.auth.token.firebase.sign_in_provider == "custom" 
               && request.auth.token.admin == true;

4. For testing purposes, you might temporarily use:
   allow read: if true; // WARNING: This allows anyone to read user data

5. Consider implementing role-based access control (RBAC) for admin users.
*/
